=================================
Kailpy的详细设计
==================================

用例设计
--------------
基本用例
~~~~~~~~~~~~~~~~~~~~
 - 用户登录
 - 正常退出
 - 超时退出

 - 发送消息
 - 获取游戏列表
 - 获取用户列表信息
 - 获取公告信息

 - 建立游戏
 - 加入游戏
 - Kick某人
 - 开始游戏
 - 游戏数据传输

扩展用例
~~~~~~~~~~~~~~~~~~~~
 - 解释Python脚本，使其能控制服务器
 - 使用简单的命令管理 

系统设计
---------------

类和功能的设计
~~~~~~~~~~~~~~~~~~~~~
KList
    系统的基础类，双向循环链表。采用链表的本意是方便增加和删除。
KConnection
    负责处理数据的发送、接收。对Socket的一层基本封装，不包含Kailler协议的信息。
KConnectionManager
    连接管理工具，负责检查数据的到达等。
KKailConnection
	基于Kaillera协议的连接。主要负责Kailler协议数据的接收，分析和发送，将字节数据转换为Packet或Instruction、将Packet转为字节数据。还包括指令队列。继承自KConnection。
KLobby
	游戏大厅，目前每个服务器只能包含一个KLobby实例。主要包含有用户List，游戏List和一个KConnectionManager。
KUser
    用户类，包含一个KKailConnection和用户信息。
KGame
    游戏信息类。包含游戏的信息，玩家。

可能涉及的难点，及解决方法
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 - 用户Chat信息处理方式 由于KUser会处理来接收过来的指令。当接收到聊天指令时，无法将聊天数据发送至所有人。
   解决办法有三个，第一将Lobby对象作为参数传进User；第二个采用全局变量；第三，设置用户自己的状态，然后由lobby去检查。
   综合来看，第三个方法较佳。

